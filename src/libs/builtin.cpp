// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeBuiltins(LLVMContext& context) {
 // Module Construction
 Module* mod = new Module("builtin.ll", context);
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-pc-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 FuncTy_0_args.push_back(PointerTy_1);
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_2 = PointerType::get(PointerTy_1, 0);
 
 std::vector<Type*>FuncTy_4_args;
 FuncTy_4_args.push_back(PointerTy_1);
 FunctionType* FuncTy_4 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_4_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_3 = PointerType::get(FuncTy_4, 0);
 
 
 // Function Declarations
 
 Function* func_print = mod->getFunction("print");
 if (!func_print) {
 func_print = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"print", mod); 
 func_print->setCallingConv(CallingConv::C);
 }
 AttributeSet func_print_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_print_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_print->setAttributes(func_print_PAL);
 
 Function* func_puts = mod->getFunction("puts");
 if (!func_puts) {
 func_puts = Function::Create(
  /*Type=*/FuncTy_4,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"puts", mod); // (external, no body)
 func_puts->setCallingConv(CallingConv::C);
 }
 AttributeSet func_puts_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_puts_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_puts->setAttributes(func_puts_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_5 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: print (func_print)
 {
  Function::arg_iterator args = func_print->arg_begin();
  
  Value* ptr_str = &*args++;
  ptr_str->setName("str");
  
  BasicBlock* label_6 = BasicBlock::Create(mod->getContext(), "",func_print,0);
  
  // Block  (label_6)
  AllocaInst* ptr_7 = new AllocaInst(PointerTy_1, "", label_6);
  ptr_7->setAlignment(8);
  StoreInst* void_8 = new StoreInst(ptr_str, ptr_7, false, label_6);
  void_8->setAlignment(8);
  LoadInst* ptr_9 = new LoadInst(ptr_7, "", false, label_6);
  ptr_9->setAlignment(8);
  CallInst* int32_10 = CallInst::Create(func_puts, ptr_9, "", label_6);
  int32_10->setCallingConv(CallingConv::C);
  int32_10->setTailCall(false);
  AttributeSet int32_10_PAL;
  int32_10->setAttributes(int32_10_PAL);
  
  ReturnInst::Create(mod->getContext(), label_6);
  
 }
 
 return mod;
}
